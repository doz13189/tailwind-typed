import path from "path";
import fs from "fs/promises";
import { writeFileSync, mkdirSync } from "fs";
import { resolve, dirname } from "path";

export interface GeneratorOptions {
  configPath: string;
  outputPath?: string;
}

export async function generateTypes(options: GeneratorOptions) {
  const { configPath, outputPath = "./system/tailwind-types.ts" } = options;
  console.log(`🔍 Loading Tailwind config: ${configPath}`);

  try {
    const tailwindcss = await import("tailwindcss");
    const cssContent = await fs.readFile(configPath, "utf-8");

    let design = await tailwindcss.__unstable__loadDesignSystem(cssContent, {
      loadStylesheet: async (id, _) => {
        if (id === "tailwindcss") {
          const themeCssPath = path.join(
            process.cwd(),
            "node_modules",
            "tailwindcss",
            "index.css"
          );
          const content = await fs.readFile(themeCssPath, "utf-8");

          return {
            path: themeCssPath,
            base: path.dirname(themeCssPath),
            content: content,
          };
        }

        return {
          path: "",
          base: "",
          content: "",
        };
      },
    });

    const classList = design.getClassList();
    const variantList = design.variants;

    // Generate type definitions
    const typeDefinitions = generateTypeDefinitions(
      classList.map((c) => c[0]),
      Array.from(variantList.keys())
    );

    // Write to file
    const resolvedPath = resolve(process.cwd(), outputPath);

    // Create directory if it doesn't exist
    const dir = dirname(resolvedPath);
    mkdirSync(dir, { recursive: true });

    // Write to file
    writeFileSync(resolvedPath, typeDefinitions, "utf-8");

    console.log(`✅ Type definitions generated: ${resolvedPath}`);

    return { success: true, path: resolvedPath };
  } catch (error) {
    console.error("Failed to generate type definitions:", error);
    throw error;
  }
}

function generateTypeDefinitions(
  classList: string[],
  variantList: string[]
): string {
  // Class List
  const classTypes = classList.map((util) => `  | "${util}"`).join("\n");

  // Variant List
  const variantTypes = variantList
    .map((variant) => `  | "${variant}"`)
    .join("\n");

  return `// Auto-generated Tailwind CSS utility types
// This file is generated by tailwind-typed
// Do not edit this file manually - regenerate with: npx tailwind-typed generate

/*
Tailwind utility classes
*/
export type ClassTypes = ${classTypes};

/*
Tailwind variant types (hover:, focus:, etc.)
*/
export type VariantTypes = ${variantTypes};

/*
Variant classes (hover:, focus:, etc.)
*/
/*
Variant classes (hover:, focus:, etc.)
*/
// NOTE: The Depth1 and Depth2 types are workarounds for the TypeScript limitation:
// ERROR: Expression produces a union type that is too complex to represent.ts(2590)
type Depth1 = \`\${VariantTypes}:\${string}\`;
type Depth2 = \`\${VariantTypes}:\${VariantTypes}:\${string}\`;

type VariantClass = Depth1 | Depth2;

/*
All valid class names (including variants)
*/
export type ClassName = ClassTypes | VariantClass;

/*
Helper function to combine class names
*/
export const className = (...inputs: ClassName[]): string => {
  return inputs.join(" ");
};

/*
Helper function to combine class names without type checking
*/
export const unstrictClassName = (...inputs: string[]): string => {
  return inputs.join(" ");
};
`;
}
