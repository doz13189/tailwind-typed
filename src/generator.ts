import { writeFileSync, mkdirSync } from "fs";
import { resolve, dirname } from "path";

export interface GeneratorOptions {
  configPath: string;
  outputPath?: string;
}

export async function generateTypes(options: GeneratorOptions) {
  const { configPath, outputPath = "./system/tailwind-types.ts" } = options;

  try {
    const tailwindcss = await import("tailwindcss");

    console.log(`🔍 Loading Tailwind config: ${configPath}`);
    const design = await tailwindcss.__unstable__loadDesignSystem(configPath);

    // Get static utilities
    const staticUtilities = Array.from(design.utilities.keys("static"));

    // Get functional utilities
    const functionalUtilities = Array.from(design.utilities.keys("functional"));

    // Generate type definitions
    const typeDefinitions = generateTypeDefinitions(
      staticUtilities,
      functionalUtilities
    );

    // Write to file
    const resolvedPath = resolve(process.cwd(), outputPath);

    // Create directory if it doesn't exist
    const dir = dirname(resolvedPath);
    mkdirSync(dir, { recursive: true });

    // Write to file
    writeFileSync(resolvedPath, typeDefinitions, "utf-8");

    console.log(`✅ Type definitions generated: ${resolvedPath}`);

    return { success: true, path: resolvedPath };
  } catch (error) {
    console.error("Failed to generate type definitions:", error);
    throw error;
  }
}

function generateTypeDefinitions(
  staticUtils: string[],
  functionalUtils: string[]
): string {
  // Static utility types
  const staticTypes = staticUtils.map((util) => `  | "${util}"`).join("\n");

  // Functional utility types
  const functionalTypes = functionalUtils
    .map((util) => `  | \`${util}\``)
    .join("\n");

  return `// Auto-generated Tailwind CSS utility types
// This file is generated by tailwind-typed
// Do not edit this file manually - regenerate with: npx tailwind-typed generate

/**
 * Static Tailwind utility classes
 */
export type StaticUtility =
${staticTypes};

/**
 * Dynamic Tailwind utility classes (accepts values)
 */
export type DynamicUtility =
${functionalTypes};

/**
 * All Tailwind utility classes
 */
export type TailwindClass = StaticUtility | DynamicUtility;

/**
 * Variant classes (hover:, focus:, etc.)
 */
export type VariantClass = \`\${string}:\${TailwindClass}\`;

/**
 * All valid class names (including variants)
 */
export type ClassName = TailwindClass | VariantClass;

/**
 * Helper function to combine class names
 */
export const className = (...inputs: ClassName[]): string => {
  return inputs.join(" ");
};
`;
}
