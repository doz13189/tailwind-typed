import fs from "fs/promises";
import { writeFileSync, mkdirSync } from "fs";
import { resolve, dirname } from "path";

export interface GeneratorOptions {
  configPath: string;
  outputPath?: string;
}

export async function generateTypes(options: GeneratorOptions) {
  const { configPath, outputPath = "./system/tailwind-types.ts" } = options;

  try {
    const tailwindcss = await import("tailwindcss");

    console.log(`🔍 Loading Tailwind config: ${configPath}`);

    // REF: https://github.com/tailwindlabs/tailwindcss/blob/2f1cbbfed28729798eebdaa57935e8f7b0c622e1/packages/tailwindcss/src/intellisense.test.ts#L173-L186
    // const cssContent = await fs.readFile(configPath, "utf-8");

    const design = await tailwindcss.__unstable__loadDesignSystem(configPath);

    const classList = design.getClassList();

    // Generate type definitions
    const typeDefinitions = generateTypeDefinitions(classList.map((c) => c[0]));

    // Write to file
    const resolvedPath = resolve(process.cwd(), outputPath);

    // Create directory if it doesn't exist
    const dir = dirname(resolvedPath);
    mkdirSync(dir, { recursive: true });

    // Write to file
    writeFileSync(resolvedPath, typeDefinitions, "utf-8");

    console.log(`✅ Type definitions generated: ${resolvedPath}`);

    return { success: true, path: resolvedPath };
  } catch (error) {
    console.error("Failed to generate type definitions:", error);
    throw error;
  }
}

function generateTypeDefinitions(classList: string[]): string {
  // Class List
  const classTypes = classList.map((util) => `  | "${util}"`).join("\n");

  return `// Auto-generated Tailwind CSS utility types
// This file is generated by tailwind-typed
// Do not edit this file manually - regenerate with: npx tailwind-typed generate

/**
 * Tailwind utility classes
 */
export type ClassTypes =
${classTypes};

/**
 * Variant classes (hover:, focus:, etc.)
 */
export type VariantClass = \`\${string}:\${ClassTypes}\`;

/**
 * All valid class names (including variants)
 */
export type ClassName = ClassTypes | VariantClass;

/**
 * Helper function to combine class names
 */
export const className = (...inputs: ClassName[]): string => {
  return inputs.join(" ");
};
`;
}
